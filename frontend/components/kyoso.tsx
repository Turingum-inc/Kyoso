/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/DOlPdtMozJ2
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  ChartTooltipContent,
  ChartTooltip,
  ChartContainer,
} from "@/components/ui/chart";
import { Pie, PieChart, CartesianGrid, XAxis, Line, LineChart } from "recharts";
import PortfolioFactory from "../contracts/PortfolioFactory.sol/PortfolioFactory.json";
import Portfolio from "../contracts/Portfolio.sol/Portfolio.json";
import { ethers } from "ethers";
import { FACTORY_CONTRACT_ADDRESS } from "@/lib/constants";
import { convertHexToNumber, truncateAddress } from "@/lib/utils";
import { useEffect, useState } from "react";

interface Portfolio {
  newPortfolios: string[][];
  curators: string[][];
  names: string[][];
  symbols: string[][];
  tokenAddresses: string[][];
  ratios: number[][];
}

interface KyosoProps {
  account: string;
  signer: ethers.Signer | null;
}

export function Kyoso({ account, signer }: KyosoProps) {
  const [portfolioData, setPortfolioData] = useState<Portfolio[]>([]);
  const [isCurateModalOpen, setCurateModalOpen] = useState(false);
  const [isCuratePendingModalOpen, setCuratePendingModalOpen] = useState(false);
  const [isPurchaseModalOpen, setPurchaseModalOpen] = useState(false);
  const [isPurchasePendingModalOpen, setPurchasePendingModalOpen] =
    useState(false);

  const getAllPortfolios = async () => {
    try {
      const contract = new ethers.Contract(
        FACTORY_CONTRACT_ADDRESS as string,
        PortfolioFactory.abi,
        signer as any
      );
      if (!contract) {
        console.error("Contract is not initialized");
        return;
      }

      const result = await contract?.getAllPortfolios({});

      const portfolios = result.map((item: any) => {
        const newPortfolioArray = item[0];
        const curatorArray = item[1];
        const nameArray = item[2];
        const symbolArray = item[3];
        const tokenAddressesArray = item[4];
        const ratiosArray = item[5].map((num: any) =>
          convertHexToNumber(num._hex)
        );

        return {
          newPortfolios: [newPortfolioArray],
          curators: [curatorArray],
          names: [nameArray],
          symbols: [symbolArray],
          tokenAddresses: [tokenAddressesArray],
          ratios: [ratiosArray],
        };
      });
      setPortfolioData(portfolios);
    } catch (err) {
      console.log(
        "Failed to retrieve portfolios. Please make sure you have created a portfolio in Curate Portfolio.",
        err
      );
    }
  };

  console.log("portfolioData", portfolioData);

  useEffect(() => {
    getAllPortfolios();
  }, [account, isCuratePendingModalOpen, isPurchasePendingModalOpen]);

  // TODO: ポートフォリオ購入後の運用パフォーマンスを計算するロジック
  const performance: string = "↑ 12.34%";

  return (
    <div className="flex justify-between p-6 ml-36">
      <div className="space-y-6">
        <div>
          <h2 className="text-lg font-semibold">Performance</h2>
          <p className="text-muted-foreground">Last 7 days</p>
        </div>
        <div className="grid grid-cols-3 gap-4">
          {portfolioData.map((portfolio, index) => (
            <Card key={index} className="bg-purple-100 p-6">
              <div className="flex justify-between items-start">
                <Button variant="default" className="bg-blue-500 text-white">
                  Buy
                </Button>
                <div className="flex items-center space-x-2">
                  <UserIcon className="h-5 w-5 text-muted-foreground" />
                  <span>{truncateAddress(portfolio.curators)}</span>
                </div>
              </div>
              <div className="flex flex-col items-center mt-4">
                <PiechartlabelChart className="w-40 h-40" />
                <div className="text-center mt-4">
                  <p className="text-lg font-semibold">評価損益</p>
                  <p className="text-2xl font-bold text-green-500">
                    {performance}
                  </p>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}

function PiechartlabelChart(props: any) {
  return (
    <div {...props}>
      <ChartContainer
        config={{
          visitors: {
            label: "Visitors",
          },
          chrome: {
            label: "Chrome",
            color: "hsl(var(--chart-1))",
          },
          safari: {
            label: "Safari",
            color: "hsl(var(--chart-2))",
          },
          firefox: {
            label: "Firefox",
            color: "hsl(var(--chart-3))",
          },
          edge: {
            label: "Edge",
            color: "hsl(var(--chart-4))",
          },
          other: {
            label: "Other",
            color: "hsl(var(--chart-5))",
          },
        }}
        className="mx-auto aspect-square max-h-[250px] pb-0"
      >
        <PieChart>
          <ChartTooltip content={<ChartTooltipContent hideLabel />} />
          <Pie
            data={[
              { browser: "chrome", visitors: 275, fill: "var(--color-chrome)" },
              { browser: "safari", visitors: 200, fill: "var(--color-safari)" },
              {
                browser: "firefox",
                visitors: 187,
                fill: "var(--color-firefox)",
              },
              { browser: "edge", visitors: 173, fill: "var(--color-edge)" },
              { browser: "other", visitors: 90, fill: "var(--color-other)" },
            ]}
            dataKey="visitors"
            label
            nameKey="browser"
          />
        </PieChart>
      </ChartContainer>
    </div>
  );
}

function UserIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" />
      <circle cx="12" cy="7" r="4" />
    </svg>
  );
}
